{"pageProps":{"tagPosts":[{"slug":"useimperativehandle","data":{"title":"useImperativeHandle with TypeScript","excerpt":"The useImperativeHandle is one of the React Hooks API and is used to call methods of child components from the parent component.","image":"","isFeatured":false,"date":"2021-08-15","tags":["React","TypeScript"]},"content":"\nThe useImperativeHandle is one of the React Hooks API and is used to call methods of child components from the parent component.\nAs mentioned in the reference, imperative code using refs should be avoided in most cases.\n\n- React: v17.0.2\n- TypeScript: v4.3.5\n\n## Child component\n\n```tsx:code-editor.tsx\nimport { useImperativeHandle, forwardRef, useState } from 'react';\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange: (value: string | undefined) => void;\n}\n\nexport interface CodeEditorHandles {\n  format: () => void;\n  fontIncrease: () => void;\n  fontDecrease: () => void;\n}\n\nconst CodeEditor = forwardRef(\n  (\n    { onChange, initialValue }: CodeEditorProps,\n    ref: React.Ref<CodeEditorHandles>\n  ) => {\n    const [fontSize, setFontSize] = useState(16);\n\n    useImperativeHandle(ref, () => ({\n      format: () => formatHandler(),\n      fontIncrease: () => setFontSize((prev) => prev + 1),\n      fontDecrease: () => setFontSize((prev) => prev - 1),\n    }));\n\n    return (\n      ...\n    );\n  }\n);\n```\n\n## Parent component\n\n```tsx:parent.tsx\nimport { useRef } from 'react';\nimport CodeEditor, { CodeEditorHandles } from './code-editor';\n\nconst Parent = () => {\n  const ref = useRef<CodeEditorHandles>();\n\n  ...\n\n  return (\n    <div>\n      <button onClick={() => ref.current.fontIncrease()}>Plus</button>\n      <button onClick={() => ref.current.fontDecrease()}>Minus</button>\n      <button onClick={() => ref.current.format()}>Format</button>\n      <CodeEditor\n        ref={ref}\n        initialValue={initialCode}\n        onChange={changeHandler}\n      />\n    </div>\n  );\n};\n```\n"}],"tag":"TypeScript"},"__N_SSG":true}