{"pageProps":{"recentPosts":[{"slug":"github-actions","data":{"title":"Deploy a Next.js app to GitHub Pages with GitHub Actions","excerpt":"","image":"","isFeatured":true,"date":"2021-07-28","tags":["Next.js","GitHub"]},"content":"\nThis article is how to deploy a static Next.js app to GitHub Pages with GitHub Actions. The Next.js app is a private repository, so I use a `repository_dispatch` event for deployment.\n\n## Create public repository for GitHub Pages\n\nCreate `<username>.github.io` as a public repository.\n\n## Create a personal access token\n\nSelect the `repo` scopes and generate a token, create a repository secret named `MY_GITHUB_TOKEN` for each repository and set the generated token to value.\n\n## Create a workflow of dispatch trigger (in private repository)\n\nCreate `.github/workflows/dispatch.yml`. A push event to a private repository triggers an action in the public repository.\n\n```yml:dispatch.yml\nname: 'Dispatch trigger'\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  dispatch-trigger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dispatch trigger\n        uses: peter-evans/repository-dispatch@v1\n        with:\n          repository: <username>/<username>.github.io\n          token: ${{ secrets.MY_GITHUB_TOKEN }}\n          event-type: sync\n```\n\n## Create a workflow of build and deployment (in public repository)\n\nCreate `.github/workflows/gh-pages.yml`. An action from the private repository executes build (`next build && next export`) and deployment jobs.\n\n```yml:gh-pages.yml\nname: GitHub Pages\n\non:\n  repository_dispatch:\n    types: [sync]\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      FROM_REPO_USER: <username>\n      FROM_REPO_NAME: <private-repository-name>\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          repository: ${{ env.FROM_REPO_USER }}/${{ env.FROM_REPO_NAME }}\n          token: ${{ secrets.MY_GITHUB_TOKEN }}\n          ref: main\n          path: ./From\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install\n        working-directory: ./From\n        run: npm install\n      - name: Build\n        working-directory: ./From\n        run: |\n          npm run build\n          touch out/.nojekyll\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./From/out\n```\n"},{"slug":"ssg-ssr","data":{"title":"When to Use Static Generation v.s. Server-side Rendering","excerpt":"","image":"","isFeatured":false,"date":"2020-01-04","tags":["Next.js","Sample"]},"content":"\nWe recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\n- Marketing pages\n- Blog posts\n- E-commerce product listings\n- Help and documentation\n\nYou should ask yourself: \"Can I pre-render this page **ahead** of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.\n"},{"slug":"mastering-javascript","data":{"title":"Mastering JavaScript","excerpt":"JavaScript is the most important programming language for web development. You probably don't know it well enough!","image":"mastering-javascript/mastering-js-thumb.png","isFeatured":false,"date":"2020-01-03","tags":["JavaScript","Sample"]},"content":"\nJavaScript powers the web - it's **the** most important programming language you need to know as a web developer.\n\nFor example, you should understand code like this:\n\n```js:example.js\nconst basics = 'Okay, that should not be too difficult actually';\n\nfunction printBasics() {\n  console.log(basics):\n}\n\nprintBasics();\n```\n\nLearn more about it [here](https://academind.com).\n"}],"allTags":{"GitHub":1,"JavaScript":1,"Next.js":4,"Sample":4}},"__N_SSG":true}