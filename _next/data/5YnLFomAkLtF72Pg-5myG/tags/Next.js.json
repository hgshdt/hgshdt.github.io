{"pageProps":{"tagPosts":[{"slug":"github-actions","data":{"title":"Deploy a Next.js app to GitHub Pages with GitHub Actions","excerpt":"","image":"","isFeatured":true,"date":"2021-07-28","tags":["Next.js","GitHub"]},"content":"\nThis article is how to deploy a static Next.js app to GitHub Pages with GitHub Actions. The Next.js app is a private repository, so I use a `repository_dispatch` event for deployment.\n\n## Create public repository for GitHub Pages\n\nCreate `<username>.github.io` as a public repository.\n\n## Create a personal access token\n\nSelect the `repo` scopes and generate a token, create a repository secret named `MY_GITHUB_TOKEN` for each repository and set the generated token to value.\n\n## Create a workflow of dispatch trigger (in private repository)\n\nCreate `.github/workflows/dispatch.yml`. A push event to a private repository triggers an action in the public repository.\n\n```yml:dispatch.yml\nname: 'Dispatch trigger'\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  dispatch-trigger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dispatch trigger\n        uses: peter-evans/repository-dispatch@v1\n        with:\n          repository: <username>/<username>.github.io\n          token: ${{ secrets.MY_GITHUB_TOKEN }}\n          event-type: sync\n```\n\n## Create a workflow of build and deployment (in public repository)\n\nCreate `.github/workflows/gh-pages.yml`. An action from the private repository executes build (`next build && next export`) and deployment jobs.\n\n```yml:gh-pages.yml\nname: GitHub Pages\n\non:\n  repository_dispatch:\n    types: [sync]\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      FROM_REPO_USER: <username>\n      FROM_REPO_NAME: <private-repository-name>\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          repository: ${{ env.FROM_REPO_USER }}/${{ env.FROM_REPO_NAME }}\n          token: ${{ secrets.MY_GITHUB_TOKEN }}\n          ref: main\n          path: ./From\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install\n        working-directory: ./From\n        run: npm install\n      - name: Build\n        working-directory: ./From\n        run: |\n          npm run build\n          touch out/.nojekyll\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./From/out\n```\n"},{"slug":"ssg-ssr","data":{"title":"When to Use Static Generation v.s. Server-side Rendering","excerpt":"","image":"","isFeatured":false,"date":"2020-01-04","tags":["Next.js","Sample"]},"content":"\nWe recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\n- Marketing pages\n- Blog posts\n- E-commerce product listings\n- Help and documentation\n\nYou should ask yourself: \"Can I pre-render this page **ahead** of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.\n"},{"slug":"getting-started-with-nextjs","data":{"title":"Getting Started with NextJS","excerpt":"NextJS is a the React framework for production - it makes building fullstack React apps and sites a breeze and ships with built-in SSR.","image":"getting-started-with-nextjs/getting-started-nextjs.png","isFeatured":true,"date":"2020-01-02","tags":["Next.js","Sample"]},"content":"\nNextJS is a **framework for ReactJS**.\n\nWait a second ... a \"framework\" for React? Isn't React itself already a framework for JavaScript?\n\nWell ... first of all, React is a \"library\" for JavaScript. That seems to be important for some people.\n\nNot for me, but still, there is a valid point: React already is a framework / library for JavaScript. So it's already an extra layer on top of JS.\n\n## Why would we then need NextJS?\n\nBecause NextJS makes building React apps easier - especially React apps that should have server-side rendering (though it does way more than just take care of that).\n\nIn this article, we'll dive into the core concepts and features NextJS has to offer:\n\n- File-based Routing\n- Built-in Page Pre-rendering\n- Rich Data Fetching Capabilities\n- Image Optimization\n- Much More\n\n## File-based Routing\n\n![Create routes via your file + folder structure](getting-started-with-nextjs/nextjs-file-based-routing.png)\n\n... More content ...\n\n### level3\n\nyyyyss\n"},{"slug":"pre-rendering","data":{"title":"Two Forms of Pre-rendering","excerpt":"","image":"","isFeatured":false,"date":"2020-01-01","tags":["Next.js","Sample"]},"content":"\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n"}],"tag":"Next.js"},"__N_SSG":true}